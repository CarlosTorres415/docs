(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{116:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),s=(n(0),n(129)),o=["components"],l={title:"mev relay"},i={unversionedId:"flashbots-auction/miners/mev-relay",id:"flashbots-auction/miners/mev-relay",isDocsHomePage:!1,title:"mev relay",description:"This repository contains a public relay for accepting transactions from searchers. It also contains an example reverse proxy for miners to run in front of their mev-geth nodes. This relay is meant only to protect participating miners from abuse via DoS attacks, but does otherwise no bundle filtering or censoring.",source:"@site/docs/flashbots-auction/miners/mev-relay.mdx",slug:"/flashbots-auction/miners/mev-relay",permalink:"/flashbots-auction/miners/mev-relay",version:"current"},c=[{value:"Public Relay",id:"public-relay",children:[{value:"eth_sendBundle",id:"eth_sendbundle",children:[]},{value:"eth_callBundle",id:"eth_callbundle",children:[]},{value:"flashbots_getUserStats",id:"flashbots_getuserstats",children:[]}]},{value:"Authentication",id:"authentication",children:[]},{value:"Miners",id:"miners",children:[]}],b={toc:c};function u(e){var t=e.components,n=Object(r.a)(e,o);return Object(s.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"This repository contains a public relay for accepting transactions from searchers. It also contains an example reverse proxy for miners to run in front of their mev-geth nodes. This relay is meant only to protect participating miners from abuse via DoS attacks, but does otherwise no bundle filtering or censoring."),Object(s.b)("h2",{id:"public-relay"},"Public Relay"),Object(s.b)("p",null,"TODO: add proper link\n",Object(s.b)("a",{parentName:"p",href:"#"},"This is the relay entrypoint"),". The public flashbots relay is available at ",Object(s.b)("a",{parentName:"p",href:"https://relay.flashbots.net."},"https://relay.flashbots.net.")," See ",Object(s.b)("a",{parentName:"p",href:"https://github.com/flashbots/ethers-provider-flashbots-bundle"},"https://github.com/flashbots/ethers-provider-flashbots-bundle")," for a library to help you call this."),Object(s.b)("p",null,"The relay provides new JSON-RPC methods for interfacing with Flashbots. They are documented below:"),Object(s.b)("h3",{id:"eth_sendbundle"},"eth_sendBundle"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "eth_sendBundle",\n  "params": [{ txs, blockNumber, minTimestamp, maxTimestamp, revertingTxHashes }]\n}\n')),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"txs"),": Array","[String]",", A list of signed transactions to execute in an atomic bundle"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"blockNumber"),": String, a hex encoded block number for which this bundle is valid on"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"minTimestamp(Optional)"),": Number, the minimum timestamp for which this bundle is valid, in seconds since the unix epoch"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"maxTimestamp(Optional)"),": Number, the minimum timestamp for which this bundle is valid, in seconds since the unix epoch"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"revertingTxHashes(Optional)"),": Array","[String]",", list of tx hashes within the bundle that are allowed to revert")),Object(s.b)("p",null,"Example:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "eth_sendBundle",\n  "params": [{["0x123abc...", "0x456def..."], "0xb63dcd", 0, 1615920932, []}]\n}\n')),Object(s.b)("h3",{id:"eth_callbundle"},"eth_callBundle"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "eth_callBundle",\n  "params": [{ txs, blockNumber, stateBlockNumber, timestamp }]\n}\n')),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"txs"),": Array","[String]",", A list of signed transactions to execute in an atomic bundle"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"targetBlockNumber"),": String, a hex encoded block number for which this bundle is valid on"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"stateBlockNumber"),': String, either a hex encoded number or a block tag for which state to base this simulation on. Can use "latest"'),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"timestamp(Optional)"),": Number, the timestamp to use for this bundle simulation, in seconds since the unix epoch")),Object(s.b)("p",null,"Example:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "eth_callBundle",\n  "params": [["0x123abc...", "0x456def..."], "0xb63dcd", "latest", 1615920932]\n}\n')),Object(s.b)("h3",{id:"flashbots_getuserstats"},"flashbots_getUserStats"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "flashbots_getUserStats",\n  "params": [blockNumber]\n}\n')),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"blockNumber"),": String, a hex encoded recent block number, in order to prevent replay attacks. Must be within 20 blocks of the current chain tip.")),Object(s.b)("p",null,"Returns a quick summary of how this searcher is performing in the relay:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'{\n  "signing_address": "0x123...",\n  "blocks_won_total": 283,\n  "bundles_submitted_total": 8503,\n  "bundles_error_total": 0,\n  "avg_gas_price_gwei": 73.43275884220039,\n  "blocks_won_last_7d": 283,\n  "bundles_submitted_last_7d": 8503,\n  "bundles_error_7d": 0,\n  "avg_gas_price_gwei_last_7d": 73.43275884220039,\n  "blocks_won_last_1d": 83,\n  "bundles_submitted_last_1d": 757,\n  "bundles_error_1d": 0,\n  "avg_gas_price_gwei_last_1d": 227.44116622595683,\n  "blocks_won_last_1h": 0,\n  "bundles_submitted_last_1h": 38,\n  "bundles_error_1h": 0,\n  "avg_gas_price_gwei_last_1h": 103.30447379959334,\n  "blocks_won_last_5m": 0,\n  "bundles_submitted_last_5m": 0,\n  "bundles_error_5m": 0,\n  "avg_gas_price_gwei_last_5m": null\n}\n')),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"blocks_won"),": This number represents how many blocks were won by this user, according to the relay. This is ",Object(s.b)("strong",{parentName:"li"},"not")," how many ended up on chain, this is just what our relay thinks would've won."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("strong",{parentName:"li"},"avg_gas_price_gwei"),": The adjusted gas price, averaged over all submissions by this user.")),Object(s.b)("h2",{id:"authentication"},"Authentication"),Object(s.b)("p",null,"This relay requires that all payloads are signed with an ethereum wallet."),Object(s.b)("p",null,"The signature is calculated by taking the EIP-191 hash of the json body encoded as UTF-8 bytes. Here's an example using ethers.js:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'body = \'{"id": 1234, "method", "eth_sendBundle", "params": [["0x123..."], "0xB84969"]}\'\nwallet = ethers.Wallet.createRandom()\nwallet.signMessage(ethers.utils.id(body))\n')),Object(s.b)("p",null,"or in web3py:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-py"},'from web3 import Web3\nfrom eth_account import Account, messages\n\nbody = \'{"id": 1234, "method", "eth_sendBundle", "params": [["0x123..."], "0xB84969"]}\'\nmessage = messages.encode_defunct(text=Web3.keccak(text=body).hex())\nsigned_message = Account.sign_message(message, private_key=private_key_hex)\n')),Object(s.b)("p",null,"or in go:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-go"},'hashedBody := crypto.Keccak256Hash([]byte(body)).Hex()\nsig, err := crypto.Sign(crypto.Keccak256([]byte("\\x19Ethereum Signed Message:\\n"+strconv.Itoa(len(hashedBody))+hashedBody)), pk)\nsignature := addr.Hex() + ":" + hexutil.Encode(sig)\n')),Object(s.b)("p",null,"Take this signature and append it to the ethereum address of the signer, separated by a colon, ",Object(s.b)("inlineCode",{parentName:"p"},":"),". Then send it in the ",Object(s.b)("inlineCode",{parentName:"p"},"X-Flashbots-Signature")," HTTP header like so:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"X-Flashbots-Signature: 0x95c622A2c597a8bdC26D371Dd3D57dA9D26052DF:0xc73d4790fed41954869625c159a4617e3374019839a8ad72de15e41371719d6873c780e00293fcdc100aa505f33dd8480e7b07551483c8c438fe8236972d26ca1c\n")),Object(s.b)("p",null,"This signer does not have to be related to the signer of your actual transactions. It is just used for authentication/rate limiting purposes, and is how ",Object(s.b)("inlineCode",{parentName:"p"},"flashbots_getUserStats")," determines the user."),Object(s.b)("h2",{id:"miners"},"Miners"),Object(s.b)("p",null,"See ",Object(s.b)("a",{parentName:"p",href:"https://github.com/flashbots/mev-proxy"},"https://github.com/flashbots/mev-proxy")," for an example reverse proxy that this relay can connect to. Also, take a look at ",Object(s.b)("a",{parentName:"p",href:"https://github.com/flashbots/mev-geth"},"https://github.com/flashbots/mev-geth")))}u.isMDXComponent=!0},129:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,m=u["".concat(o,".").concat(d)]||u[d]||p[d]||s;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);